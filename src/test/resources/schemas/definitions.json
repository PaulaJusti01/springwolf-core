import boto3

# Dicionário de mapeamento das métricas suportadas
METRIC_MAP = {
    "CPU": "ECSServiceAverageCPUUtilization",
    "Memory": "ECSServiceAverageMemoryUtilization",
    # Futuras métricas podem ser adicionadas aqui
}

def register_auto_scaling(cluster_name, service_name, resource_id, min_tasks, max_tasks, target_value, metric):
    client = boto3.client('application-autoscaling')

    # Registrar o target de escalonamento
    client.register_scalable_target(
        ServiceNamespace='ecs',
        ResourceId=f'service/{cluster_name}/{service_name}',
        ScalableDimension='ecs:service:DesiredCount',
        MinCapacity=min_tasks,
        MaxCapacity=max_tasks
    )

    print("Scalable target registrada com sucesso.")

    # Verifica se a métrica escolhida está no dicionário
    metric_type = METRIC_MAP.get(metric, "ECSServiceAverageCPUUtilization")  # Default para CPU

    # Criar a política de escalonamento
    client.put_scaling_policy(
        PolicyName=f"{metric}ScalingPolicy",
        ServiceNamespace='ecs',
        ResourceId=f'service/{cluster_name}/{service_name}',
        ScalableDimension='ecs:service:DesiredCount',
        PolicyType='TargetTrackingScaling',
        TargetTrackingScalingPolicyConfiguration={
            'TargetValue': target_value,
            'PredefinedMetricSpecification': {
                'PredefinedMetricType': metric_type
            },
            'ScaleInCooldown': 60,
            'ScaleOutCooldown': 60
        }
    )

    print(f"Scaling policy criada com sucesso para a métrica: {metric}")
